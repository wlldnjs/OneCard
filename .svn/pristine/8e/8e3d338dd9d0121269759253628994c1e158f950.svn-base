package test;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.StringTokenizer;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * 이 클래스는 클라이언트 클래스다. 사용자의 UI와 서버와 통신을 하는 역할을 수행한다. 쓰레드 사용을 위해 Runnable 인터페이스를
 * 상속받는다.
 *
 * @version 1.02 17/02/10
 * @author team 2
 * @since JDK1.3
 */
public class Client implements Runnable, ActionListener {

	private BufferedReader input;
	private PrintWriter output;
	private Thread listener;
	private String host;
	private String myId;
	private OneCardGUI frame;
	private Handler handler;

	private int playerNum = 0;
	public boolean ready = false;
	private int userIdx = 0;
	private String useCard = "";

	// 모양변경 다이어로그
	static JDialog selectShape;
	JPanel grid;
	JLabel dialogMsg;
	JButton[] selectShapeBtn = new JButton[4];

	// 메세지 다이어로그
	JDialog dialog;
	JLabel dialogText;

	// 사용자의 패 리스트
	public static List<String> player = new ArrayList<String>();

	/**
	 * 사용자 UI와 쓰레드를 생성, 작동시키는 생성자.
	 *
	 * @param server
	 *            서버 주소
	 * @since JDK 1.2
	 */
	Client(String server) {

		// 카드변경 다이어로그 생성
		selectShape = new JDialog();
		selectShape.setLayout(new BorderLayout());
		grid = new JPanel(new GridLayout(1, 4, 5, 10));
		dialogMsg = new JLabel("바꿀 모양을 선택해주세요!");
		selectShapeBtn[0] = new JButton("♠");
		selectShapeBtn[1] = new JButton("♡");
		selectShapeBtn[2] = new JButton("◇");
		selectShapeBtn[3] = new JButton("♣");
		for (int i = 0; i < 4; i++) {
			grid.add(selectShapeBtn[i]);
		}
		selectShape.add(grid, "Center");
		selectShape.add(dialogMsg, "North");
		selectShape.setSize(270, 100);
		selectShapeBtn[0].addActionListener(new ActionListener() { // 스페이드 변경
			@Override
			public void actionPerformed(ActionEvent e) {
				Server.frontCard = "s7";
				System.out.println("스페이드로 모양 변경");
				selectShape.setVisible(false);
				frame.frontCard.setText("s7");
				Server.cardChange = true;
			}
		});
		selectShapeBtn[1].addActionListener(new ActionListener() { // 하트 변경
			@Override
			public void actionPerformed(ActionEvent e) {
				Server.frontCard = "h7";
				System.out.println("하트로 모양 변경");
				selectShape.setVisible(false);
				frame.frontCard.setText("h7");
				Server.cardChange = true;
			}
		});
		selectShapeBtn[2].addActionListener(new ActionListener() { // 다이아몬드 변경
			@Override
			public void actionPerformed(ActionEvent e) {
				Server.frontCard = "d7";
				System.out.println("다이아몬드로 모양 변경");
				selectShape.setVisible(false);
				frame.frontCard.setText("d7");
				Server.cardChange = true;
			}
		});

		selectShapeBtn[3].addActionListener(new ActionListener() { // 크로버 변경
			@Override
			public void actionPerformed(ActionEvent e) {
				Server.frontCard = "c7";
				System.out.println("크로버로 모양 변경");
				selectShape.setVisible(false);
				frame.frontCard.setText("c7");
				Server.cardChange = true;
			}
		});

		// 일반 메시지 다이어로그
		dialog = new JDialog();
		dialogText = new JLabel();
		dialog.add(dialogText);
		dialog.setSize(200, 100);

		// 통신
		host = server;

		// 사용자 UI를 위해 OneCardGUI 객체 생성.
		frame = new OneCardGUI();
		frame.setVisible(true);

		// 버튼과 채팅 텍스트필드에 이벤트 감지기 설정.
		frame.sendMsg.addActionListener(this);
		frame.btn_Start_1.addActionListener(this);
		frame.btn_Start_2.addActionListener(this);
		frame.btn_Join.addActionListener(this);
		frame.joinBackBtn.addActionListener(this);
		frame.cardDeck.addActionListener(this);

		// 통신(서버로부터 입력받기)을 위한 쓰레드 생성.
		listener = new Thread(this);
		listener.start();

		frame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				if (myId == null) {
					System.exit(0);
				}
				System.exit(0);
			}
		});
	}

	/**
	 * 쓰레드가 작동하면 실행되는 메소드. 서버에서 메세지를 입력받기를 기다리다가 메세지가 오면 출력한다.
	 *
	 * @since JDK 1.2
	 */
	public void run() {

		try {
			Socket socket = new Socket(host, 1000);
			InputStream ins = socket.getInputStream();
			OutputStream os = socket.getOutputStream();

			input = new BufferedReader(new InputStreamReader(ins));
			output = new PrintWriter(new OutputStreamWriter(os), true);

			// 무한 반복문으로 서버에서 들어오는 입력을 검사하고 출력한다.

			while (true) {
				String line = input.readLine();
				System.out.println(line);
				StringTokenizer st = new StringTokenizer(line, "|");

				String RequestCode = st.nextToken();
				String token = st.nextToken();

				System.out.println(token);
				if (RequestCode.equals("ready")) { // 플레이어 번호 지정
					playerNum = Integer.parseInt(token);
					System.out.println("플레이어 번호 : " + playerNum);
				}
				if (RequestCode.equals("ok")) { // ready상태 true로 전환
					ready = true;
					frame.cardDeck.setText("뽑기");
					System.out.println("준비완료" + ready);
				}
				if (RequestCode.equals("open")) { // 첫 카드 한장 공개
					frame.frontCard.setText(token);
				} else if (RequestCode.equals("cardDivide")) {
					System.out.println(token + "번 플레이어게에 카드나누기 시작");
					int num = Integer.parseInt(token);
					System.out.println("내 번호 :" + playerNum);

					if (num == playerNum) {
						System.out.println("특정 플레이어에게 나눠주기 들어옴");
						player.add(st.nextToken());
						for (int i = 0; i < player.size(); i++) {
							frame.playerCard[i].setText(player.get(i));
							frame.playerCard[i].setVisible(true);
							frame.playerCard[i].addActionListener(this);
						}

					}
					if (userIdx == 3) {
						userIdx = 0;
						
					} else {
						userIdx++;
					}frame.centerNameLa.setText((userIdx) + " player");

				} else if(RequestCode.equals("turnEnd")){
					if (userIdx == 3) {
						userIdx = 0;
					} else {
						userIdx++;
					}frame.centerNameLa.setText((userIdx) + " player");
				}

			} // end while
		} catch (Exception ex) {

		} // end catch
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		Object obj = e.getSource();

		// 컴포넌트에 따른 이벤트 처리.

		if (obj == frame.cardDeck) { // 카드를 뽑을 때
			if (ready == false) {
				// if(frame.cardDeck.getText().equals("시작")){
				output.println("1000");
				System.out.println("Request 1000");
				// }
				// else{
				// output.println("1100");
				// }

			} else if (ready) {
				System.out.println(playerNum + "," + userIdx);
				if (playerNum == userIdx) {
					output.println("1100");
					System.out.println("Request 1100");
				}
			}
		} else if (obj == frame.playerCard[0] || obj == frame.playerCard[1] || obj == frame.playerCard[2]
				|| obj == frame.playerCard[3] || obj == frame.playerCard[4] || obj == frame.playerCard[5]
				|| obj == frame.playerCard[6] || obj == frame.playerCard[7] || obj == frame.playerCard[8]
				|| obj == frame.playerCard[9] || obj == frame.playerCard[10] || obj == frame.playerCard[11]
				|| obj == frame.playerCard[12] || obj == frame.playerCard[13]) {
			// 사용자의 카드를 선택하였을 때
			if (playerNum == userIdx) {
				System.out.println("카드사용 메소드 돌입");
				JButton btn = (JButton) obj; // 선택한 카드 버튼
				String card = btn.getText(); // 선택한 카드의 텍스트
				System.out.println("선택한 카드는 " + card);

				String selectCardShape = card.substring(0, 1); // 선택한 카드의 모양
				String selectCardNumber = card.substring(1); // 선택한 카드의 숫자
				System.out.println("카드 모양: " + selectCardShape + ", 카드 번호: " + selectCardNumber);

				String front = frame.frontCard.getText();
				String frontCardShape = front.substring(0, 1); // 선택한 카드의 모양
				String frontCardNumber = front.substring(1); // 선택한 카드의 숫자
				if (frontCardShape.equals(selectCardShape) || frontCardNumber.equals(selectCardNumber)) {
					if(!useCard.equals(card)){
					output.println("1200|" + card);
					for (int i = 0; i < player.size(); i++) {
						frame.playerCard[i].setVisible(false);
					}
					player.remove(card);
					btn.setVisible(false);
					System.out.println("카드 사용.");
					useCard = card;
					for (int i = 0; i < player.size(); i++) {
						frame.playerCard[i].setText(player.get(i));
						frame.playerCard[i].setVisible(true);
						frame.playerCard[i].addActionListener(this);
					}
					}
				} else {
					System.out.println("낼수없다.");
				}

			}
		}
	}

	// 메인 메소드
	public static void main(String args[]) {
		if (args.length > 0) {
			new Client(args[0]);
		} else {
			new Client("210.123.255.157");
		} // end else
	}
}