package server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.StringTokenizer;

/**
 * 이 클래스는 클라이언트와 통신을 담당하는 기능을 하는 서버다. 이 클래스는 쓰레드로 클라이언트로 부터 들어오는 입력을 받는다. 입력되는
 * 프로토콜에 따라 출력 메세지를 구분하는 역할을 수행한다. Thread 클래스를 상속받는다. GameServer 클래스의 메소드들을
 * 오버라이드한다.
 *
 *
 * @version 1.02 17/02/10
 * @author team 2
 * @since JDK1.3
 */
public class GameHandler extends Thread {

	private final int DOUBLED_ID = 10; // 회원 가입시 중복 ID일 때 보내는 메세지의 프로토콜 넘버.
										// 클라이언트에 다이얼로그를 생성한다.
	private final int NOT_LOG_IN = 20; // 로그인 시 ID가 일치하지 않을 때 보내는 메세지의 프로토콜 넘버.
									// 클라이언트에 다이얼로그를 생성한다.
	private final int DOUBLED_LOG_IN = 30; // 로그인 시 PW가 일치하지 않을 때 보내는 메세지의 프로토콜 넘버.
									// 클라이언트에 다이얼로그를 생성한다.
	private final int ADD_MEMBER = 60; // 사용자가 회원 가입 시에 보내는 메세지의 프로토콜 넘버. 클라이언트에
										// 다이얼로그를 생성한다.
	private final int LOG_IN = 70; // 사용자가 로그인 시에 보내는 메세지의 프로토콜 넘버. 클라이언트에
									// 다이얼로그를 생성한다.

	// private final int DEFAULT = 100; // 클라이언트가 접속하자 마자 보내주는 시스템 메세지의 프로토콜 넘버.
	private final int SYSTEM_MESSAGE_ENTER = 110; // 클라이언트가 접속할 때 보내는 메세지의 프로토콜
													// 넘버.
	private final int SYSTEM_MESSAGE_PUTDOWN = 120; // 게이머가 카드를 냈을 때 보내는 메세지의
													// 프로토콜 넘버.
	private final int SYSTEM_MESSAGE_PUTUP = 130; // 게이머가 카드를 한 장 먹었을 때 보내는 메세지의
													// 프로토콜 넘버.
	private final int SYSTEM_MESSAGE_TIMESUP = 140; // 게이머가 주어진 시간을 다 썼을 때 보내는
													// 메세지의 프로토콜 넘버.
	private final int SYSTEM_MESSAGE_ONECARD = 150; // 게이머가 가진 카드가 1 장 남았을 때 보내는
													// 메세지의 프로토콜 넘버.
	private final int SYSTEM_MESSAGE_WIN = 160; // 게이머가 카드를 다 내면 보내는 메세지의 프로토콜
												// 넘버.
	private final int SYSTEM_MESSAGE_TURN = 170; // 게이머 차례가 왔을 때 보내는 메세지의 프로토콜
													// 넘버.
	private final int SYSTEM_MESSAGE_END_TURN = 180; // 게이머의 차례가 끝났을 때 클라이언트로 받는
														// 메세지의 프로토콜 넘버.
	private final int SYSTEM_MESSAGE_EXIT = 190; // 클라이언트가 접속을 끊었을 때 보내는 시스템
													// 메세지의 프로토콜 넘버.
	private final int CONVERSATION = 200; // 채팅에 사용되는 프로토콜 넘버.

	private Socket socket;
	private BufferedReader input;
	private PrintWriter output;
	private GameServer server;
	protected Member member;

	/**
	 * GameServer 클래스에서 GameHandler 인스턴스를 생성하기 위한 생성자.
	 * 
	 * getInputStream, getOutputStream 메소드때문에 IOException 예외처리를 했다.
	 *
	 * @param server
	 *            서버
	 * @param socket
	 *            소켓
	 * @since JDK 1.2
	 */
	GameHandler(GameServer server, Socket socket) throws IOException {

		this.socket = socket;
		this.server = server;

		InputStream ins = socket.getInputStream(); // 소켓으로부터 서버의 데이터 입구를 만듬.
		OutputStream os = socket.getOutputStream(); // 소켓으로부터 소버의 데이터 출구를 만듬.

		input = new BufferedReader(new InputStreamReader(ins)); // 입구에
																// BufferedReader라는
																// 필터를 달아줌.
		output = new PrintWriter(new OutputStreamWriter(os), true); // 출구에
																	// PrintWriter라는
																	// 필터를 달아줌.

	}

	/*
	 * 회원 가입 1. 회원 정보를 담을 그릇을 만든다. ( ex) class Member 또는 GameHandler 클래스 안에 필드
	 * 멤버로 설정. ) 2. GameServer 클래스 안에 handlers 라는 벡터 컬렉션을 통해 중복 아이디를 검사하는 프로세스를
	 * 만든다. ( ex) checkId() 라는 메소드 ) 3. 중복 아이디 검사를 통과하면 회원 정보를 handlers라는 벡터
	 * 컬렉션에 저장하는 프로세스를 만든다.
	 * 
	 * 로그인 1. handlers 벡터 컬렉션을 통해 아이디 검사를 하는 프로세스를 만든다. 2. 아이디가 일치하면 비밀번호를 검사하는
	 * 프로세스를 만든다. 3. 위 과정을 다 통과하면 메인 화면으로 넘어가는 프로세스를 만든다.
	 */

	/**
	 * 통신을 담당하는 쓰레드 메소드. 클라이언트가 접속하면 GameServer 클래스에서 쓰레드를 작동한다.
	 * 
	 * @since JDK 1.2
	 */
	public void run() {
		
		try {
			// 쓰레드를 위한 무한 반복문.
//			server.register(this); // 채팅창에 출력하기 위한 테스트 코드
			while (true) {

				String line = input.readLine();
				String user_id = ""; //
				String message = "";
				String input_id;
				String input_pw;
				StringTokenizer st = new StringTokenizer(line, "|");
				// 프로토콜이 메세지의 제일 앞에 오므로 정수형으로 타입변환한다.
				int protocol = Integer.parseInt(st.nextToken());

				// 프로토콜로 구분되는 스위치문.
				switch (protocol) {

				case DOUBLED_ID:
					unicast(DOUBLED_ID + "|");
					break;

				case NOT_LOG_IN:
					unicast(NOT_LOG_IN + "|");
					break;

//				case NO_PW:
//					unicast(NO_PW + "|");
//					break;

				case ADD_MEMBER:
					// TODO 클라이언트에서 받은 데이터로 중복 아이디를 검사하고 중복 아이디가 없을 때 회원으로 등록하는
					// 프로세스가 들어가야 함.
					input_id = st.nextToken();
					input_pw = st.nextToken();
					String name = st.nextToken();
					int victory = 0;
					
					if(checkId(input_id)){
						member = new Member(input_id, input_pw, name, victory);
						saveMember(member);
						unicast(ADD_MEMBER + "|");
						break;
					} 
					
					unicast(DOUBLED_ID + "|");
					break;
					
					
				case LOG_IN:
					System.out.println("클라이언트에서 log_in 왔음");   // 테스트 코드.
					// TODO 클라이언트에서 받은 데이터(아이디, 비번)와 서버의 데이터에 있는 아이디와 비밀번호를 비교,
					// 검사하는 프로세스가 들어가야 함.
					input_id = st.nextToken();
					input_pw = st.nextToken();
					
					if(checkPassword(input_id, input_pw) != null) {
						
						if (checkLoginMember(input_id)) {
							member = checkPassword(input_id, input_pw);
							server.register(this);
							unicast(LOG_IN + "|");
							break;
						} else {
							unicast(DOUBLED_LOG_IN + "|");
							break;
						}
						
					} else {
						unicast(NOT_LOG_IN + "|");
						break;
					}

				case SYSTEM_MESSAGE_ENTER:
					user_id = st.nextToken();
					broadcast(SYSTEM_MESSAGE_ENTER + "|" + user_id);
					break;

				case SYSTEM_MESSAGE_PUTDOWN:
					user_id = st.nextToken();
					broadcast(SYSTEM_MESSAGE_PUTDOWN + "|" + user_id);
					break;

				case SYSTEM_MESSAGE_PUTUP:
					user_id = st.nextToken();
					broadcast(SYSTEM_MESSAGE_PUTUP + "|" + user_id);
					break;

				case SYSTEM_MESSAGE_TIMESUP:
					user_id = st.nextToken();
					broadcast(SYSTEM_MESSAGE_TIMESUP + "|" + user_id);
					break;

				case SYSTEM_MESSAGE_ONECARD:
					user_id = st.nextToken();
					broadcast(SYSTEM_MESSAGE_ONECARD + "|" + user_id);
					break;

				case SYSTEM_MESSAGE_WIN:
					user_id = st.nextToken();
					broadcast(SYSTEM_MESSAGE_WIN + "|" + user_id);
					break;

				case SYSTEM_MESSAGE_TURN:
					user_id = st.nextToken();
					broadcast(SYSTEM_MESSAGE_TURN + "|" + user_id);
					break;

				case SYSTEM_MESSAGE_END_TURN: // TODO 차례를 다음 플레이어에게 넘겨주는 프로세스가
												// 들어가야 함.

					break;

				case SYSTEM_MESSAGE_EXIT:
					user_id = st.nextToken();
					broadcast(SYSTEM_MESSAGE_EXIT + "|" + user_id);
					server.unregister(this);
					input.close();
					output.close();
					socket.close();
					break;

				case CONVERSATION:
					System.out.println("왔음"); // 테스트 코드
					user_id = st.nextToken();
					message = st.nextToken();
					broadcast(CONVERSATION + "|" + user_id + "|" + message);
					break;

				} // end switch
			} // end while
		} catch (IOException ex) {
			ex.printStackTrace();
		} // end catch
	}

	/**
	 * 특정 클라이언트 한 명에게만 메세지를 출력할 수 있는 메소드.
	 * 
	 * @param message
	 *            각 프로토콜에 해당하는 메세지.
	 * @since JDK 1.2
	 */
	protected void unicast(String message) {
		output.println(message); // PrintWriter 의 println 메소드 사용.
	}

	/**
	 * 모든 클라이언트에게 메세지를 출력하는 메소드. GameServer 클래스의 broadcast 메소드를 오버라이드한다.
	 * 
	 * @param message
	 *            각 프로토콜에 해당하는 메세지.
	 * @since JDK 1.2
	 */
	protected void broadcast(String message) {
		server.broadcast(message); // GameServer 클래스의 broadcast 메소드 사용.
	}

	protected boolean checkId(String input_id) {
		if(server.checkId(input_id)){
			return true; //  input_id와 일치하는 아이디가 없을 때 true 반환.
		}
		return false; // input_id와 일치하는 아이디가 있을 때 false 반환.
	}
	
	protected void saveMember(Member member) {
		try {
		server.saveMember(member);
		} catch (IOException e) {
			
		}
	}
	
	protected Member checkPassword(String input_id, String input_pw) {
		
		if(server.checkPassword(input_id, input_pw) != null){
			return server.checkPassword(input_id, input_pw);
		} else {
			return null;
		}
	}
	
	protected boolean checkLoginMember(String input_id) {
		if (server.checkLoginMember(input_id)){
			return true;
		} else {
			return false;
		}
	}
}
