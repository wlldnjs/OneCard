package test;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * 이 클래스는 클라이언트 클래스다. 사용자의 UI와 서버와 통신을 하는 역할을 수행한다. 쓰레드 사용을 위해 Runnable 인터페이스를
 * 상속받는다.
 *
 * @version 1.02 17/02/10
 * @author team 2
 * @since JDK1.3
 */
public class Client implements Runnable, ActionListener {

	private BufferedReader input;
	private PrintWriter output;
	private Thread listener;
	private String host;
	private String myId;
	private OneCardGUI frame;
	private Handler handler;

	// 인게임 변수
	private int playerNum = 0;
	public boolean ready = false;
	private int userIdx = 0;
	private String useCard = "";
	String card ="";	// 사용자가 카드를 사용할 때 카드의 이름이 들어감
	private boolean playBack = false;
	private boolean playJump = false;
	private boolean cardChange = false;

	// 모양변경 다이어로그
	static JDialog selectShape;
	JPanel grid;
	JLabel dialogMsg;
	JButton[] selectShapeBtn = new JButton[4];

	// 메세지 다이어로그
	JDialog dialog;
	JLabel dialogText;

	// 카드 순서 저장 List
	public List<String> cardList = new ArrayList<String>();

	// 카드 이미지 아이콘 TODO 코드가 몹시 더러우므로 정리해야할 필요가 있다.
	public List<ImageIcon> cardImgList = new ArrayList<ImageIcon>();

	ImageIcon jb = new ImageIcon("src/image/jb.jpg");
	ImageIcon s1 = new ImageIcon("src/image/s1.jpg");
	ImageIcon s2 = new ImageIcon("src/image/s2.jpg");
	ImageIcon s3 = new ImageIcon("src/image/s3.jpg");
	ImageIcon s4 = new ImageIcon("src/image/s4.jpg");
	ImageIcon s5 = new ImageIcon("src/image/s5.jpg");
	ImageIcon s6 = new ImageIcon("src/image/s6.jpg");
	ImageIcon s7 = new ImageIcon("src/image/s7.jpg");
	ImageIcon s8 = new ImageIcon("src/image/s8.jpg");
	ImageIcon s9 = new ImageIcon("src/image/s9.jpg");
	ImageIcon s10 = new ImageIcon("src/image/s10.jpg");
	ImageIcon s11 = new ImageIcon("src/image/s11.jpg");
	ImageIcon s12 = new ImageIcon("src/image/s12.jpg");
	ImageIcon s13 = new ImageIcon("src/image/s13.jpg");
	ImageIcon h1 = new ImageIcon("src/image/h1.jpg");
	ImageIcon h2 = new ImageIcon("src/image/h2.jpg");
	ImageIcon h3 = new ImageIcon("src/image/h3.jpg");
	ImageIcon h4 = new ImageIcon("src/image/h4.jpg");
	ImageIcon h5 = new ImageIcon("src/image/h5.jpg");
	ImageIcon h6 = new ImageIcon("src/image/h6.jpg");
	ImageIcon h7 = new ImageIcon("src/image/h7.jpg");
	ImageIcon h8 = new ImageIcon("src/image/h8.jpg");
	ImageIcon h9 = new ImageIcon("src/image/h9.jpg");
	ImageIcon h10 = new ImageIcon("src/image/h10.jpg");
	ImageIcon h11 = new ImageIcon("src/image/h11.jpg");
	ImageIcon h12 = new ImageIcon("src/image/h12.jpg");
	ImageIcon h13 = new ImageIcon("src/image/h13.jpg");
	ImageIcon d1 = new ImageIcon("src/image/d1.jpg");
	ImageIcon d2 = new ImageIcon("src/image/d2.jpg");
	ImageIcon d3 = new ImageIcon("src/image/d3.jpg");
	ImageIcon d4 = new ImageIcon("src/image/d4.jpg");
	ImageIcon d5 = new ImageIcon("src/image/d5.jpg");
	ImageIcon d6 = new ImageIcon("src/image/d6.jpg");
	ImageIcon d7 = new ImageIcon("src/image/d7.jpg");
	ImageIcon d8 = new ImageIcon("src/image/d8.jpg");
	ImageIcon d9 = new ImageIcon("src/image/d9.jpg");
	ImageIcon d10 = new ImageIcon("src/image/d10.jpg");
	ImageIcon d11 = new ImageIcon("src/image/d11.jpg");
	ImageIcon d12 = new ImageIcon("src/image/d12.jpg");
	ImageIcon d13 = new ImageIcon("src/image/d13.jpg");
	ImageIcon c1 = new ImageIcon("src/image/c1.jpg");
	ImageIcon c2 = new ImageIcon("src/image/c2.jpg");
	ImageIcon c3 = new ImageIcon("src/image/c3.jpg");
	ImageIcon c4 = new ImageIcon("src/image/c4.jpg");
	ImageIcon c5 = new ImageIcon("src/image/c5.jpg");
	ImageIcon c6 = new ImageIcon("src/image/c6.jpg");
	ImageIcon c7 = new ImageIcon("src/image/c7.jpg");
	ImageIcon c8 = new ImageIcon("src/image/c8.jpg");
	ImageIcon c9 = new ImageIcon("src/image/c9.jpg");
	ImageIcon c10 = new ImageIcon("src/image/c10.jpg");
	ImageIcon c11 = new ImageIcon("src/image/c11.jpg");
	ImageIcon c12 = new ImageIcon("src/image/c12.jpg");
	ImageIcon c13 = new ImageIcon("src/image/c13.jpg");
	ImageIcon jc = new ImageIcon("src/image/jc.jpg");

	// 사용자의 패 리스트
	public static List<String> player = new ArrayList<String>();

	/**
	 * 사용자 UI와 쓰레드를 생성, 작동시키는 생성자.
	 *
	 * @param server
	 *            서버 주소
	 * @since JDK 1.2
	 */
	Client(String server) {
		// cardImgList에 카드 이미지 아이콘 삽입 //TODO 코드가 몹시 더러우므로 정리해야할 필요가 있다.
		cardImgList.add(jb);
		cardImgList.add(s1);
		cardImgList.add(s2);
		cardImgList.add(s3);
		cardImgList.add(s4);
		cardImgList.add(s5);
		cardImgList.add(s6);
		cardImgList.add(s7);
		cardImgList.add(s8);
		cardImgList.add(s9);
		cardImgList.add(s10);
		cardImgList.add(s11);
		cardImgList.add(s12);
		cardImgList.add(s13);
		cardImgList.add(h1);
		cardImgList.add(h2);
		cardImgList.add(h3);
		cardImgList.add(h4);
		cardImgList.add(h5);
		cardImgList.add(h6);
		cardImgList.add(h7);
		cardImgList.add(h8);
		cardImgList.add(h9);
		cardImgList.add(h10);
		cardImgList.add(h11);
		cardImgList.add(h12);
		cardImgList.add(h13);
		cardImgList.add(d1);
		cardImgList.add(d2);
		cardImgList.add(d3);
		cardImgList.add(d4);
		cardImgList.add(d5);
		cardImgList.add(d6);
		cardImgList.add(d7);
		cardImgList.add(d8);
		cardImgList.add(d9);
		cardImgList.add(d10);
		cardImgList.add(d11);
		cardImgList.add(d12);
		cardImgList.add(d13);
		cardImgList.add(c1);
		cardImgList.add(c2);
		cardImgList.add(c3);
		cardImgList.add(c4);
		cardImgList.add(c5);
		cardImgList.add(c6);
		cardImgList.add(c7);
		cardImgList.add(c8);
		cardImgList.add(c9);
		cardImgList.add(c10);
		cardImgList.add(c11);
		cardImgList.add(c12);
		cardImgList.add(c13);
		cardImgList.add(jc);

		// cardList에 카드 생성
		// ♠=s1~13, ♡=h1~13, ◇=d1~13, ♣=c1~13, blackJoker=j1, colorJoker=j2
		// 0 = j1 , 1~13 = s1~13, 14~26 = h1~13, 27~39 = d1~13,
		// 40~52 = c1~13, 53 = j2

		cardList.add("jb");
		for (int i = 0; i < 13; i++) {
			cardList.add("s" + (i + 1));
		}
		for (int i = 0; i < 13; i++) {
			cardList.add("h" + (i + 1));
		}
		for (int i = 0; i < 13; i++) {
			cardList.add("d" + (i + 1));
		}
		for (int i = 0; i < 13; i++) {
			cardList.add("c" + (i + 1));
		}
		cardList.add("jc");

		// 카드변경 다이어로그 생성
		selectShape = new JDialog();
		selectShape.setLayout(new BorderLayout());
		grid = new JPanel(new GridLayout(1, 4, 5, 10));
		dialogMsg = new JLabel("바꿀 모양을 선택해주세요!");
		selectShapeBtn[0] = new JButton("♠");
		selectShapeBtn[1] = new JButton("♡");
		selectShapeBtn[2] = new JButton("◇");
		selectShapeBtn[3] = new JButton("♣");
		for (int i = 0; i < 4; i++) {
			grid.add(selectShapeBtn[i]);
		}
		selectShape.add(grid, "Center");
		selectShape.add(dialogMsg, "North");
		selectShape.setSize(270, 100);
		selectShapeBtn[0].addActionListener(new ActionListener() { // 스페이드 변경
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("스페이드로 모양 변경");
				selectShape.setVisible(false);
				output.println("1200|" + card);
				output.println("1300|s7");
			}
		});
		selectShapeBtn[1].addActionListener(new ActionListener() { // 하트 변경
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("하트로 모양 변경");
				selectShape.setVisible(false);
				output.println("1200|" + card);
				output.println("1300|h7");
				
			}
		});
		selectShapeBtn[2].addActionListener(new ActionListener() { // 다이아몬드 변경
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("다이아몬드로 모양 변경");
				selectShape.setVisible(false);
				output.println("1200|" + card);
				output.println("1300|d7");
			}
		});

		selectShapeBtn[3].addActionListener(new ActionListener() { // 크로버 변경
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("크로버로 모양 변경");
				selectShape.setVisible(false);
				output.println("1200|" + card);
				output.println("1300|c7");
			}
		});

		// 일반 메시지 다이어로그
		dialog = new JDialog();
		dialogText = new JLabel();
		dialog.add(dialogText);
		dialog.setSize(200, 100);

		// 통신
		host = server;

		// 사용자 UI를 위해 OneCardGUI 객체 생성.
		frame = new OneCardGUI();
		frame.setVisible(true);

		// 버튼과 채팅 텍스트필드에 이벤트 감지기 설정.
		frame.sendMsg.addActionListener(this);
		frame.btn_Start_1.addActionListener(this);
		frame.btn_Start_2.addActionListener(this);
		frame.btn_Join.addActionListener(this);
		frame.joinBackBtn.addActionListener(this);
		frame.cardDeck.addActionListener(this);

		// 통신(서버로부터 입력받기)을 위한 쓰레드 생성.
		listener = new Thread(this);
		listener.start();

		frame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				if (myId == null) {
					System.exit(0);
				}
				System.exit(0);
			}
		});
	}

	/**
	 * 쓰레드가 작동하면 실행되는 메소드. 서버에서 메세지를 입력받기를 기다리다가 메세지가 오면 출력한다.
	 *
	 * @since JDK 1.2
	 */
	public void run() {

		try {
			Socket socket = new Socket(host, 1000);
			InputStream ins = socket.getInputStream();
			OutputStream os = socket.getOutputStream();

			input = new BufferedReader(new InputStreamReader(ins));
			output = new PrintWriter(new OutputStreamWriter(os), true);

			// 무한 반복문으로 서버에서 들어오는 입력을 검사하고 출력한다.

			while (true) {
				String line = input.readLine();
				System.out.println(line);
				StringTokenizer st = new StringTokenizer(line, "|");

				String RequestCode = st.nextToken();
				String token = st.nextToken();

				System.out.println(token);
				if (RequestCode.equals("ready")) { // 플레이어 번호 지정
					playerNum = Integer.parseInt(token);
					frame.userName_La.setText("" + playerNum);

					System.out.println("플레이어 번호 : " + playerNum);
				}
				if (RequestCode.equals("ok")) { // ready상태 true로 전환
					if (playerNum == 0) {
						frame.player2_nameLabel.setText("1");
						frame.player3_nameLabel.setText("2");
						frame.player4_nameLabel.setText("3");
					} else if (playerNum == 1) {
						frame.player2_nameLabel.setText("2");
						frame.player3_nameLabel.setText("3");
						frame.player4_nameLabel.setText("0");
					} else if (playerNum == 2) {
						frame.player2_nameLabel.setText("3");
						frame.player3_nameLabel.setText("0");
						frame.player4_nameLabel.setText("1");
					} else if (playerNum == 3) {
						frame.player2_nameLabel.setText("0");
						frame.player3_nameLabel.setText("1");
						frame.player4_nameLabel.setText("2");
					}
					frame.player2CardCnt.setText("7");
					frame.player3CardCnt.setText("7");
					frame.player4CardCnt.setText("7");
					ready = true;
					frame.cardDeck.setText("뽑기");
					System.out.println("준비완료" + ready);
				}
				if (RequestCode.equals("open")) { // 첫 카드 한장 공개
					// frame.frontCard.setText(token);
					int iconNum = cardList.indexOf(token);
					frame.frontCard.setIcon(cardImgList.get(iconNum));

				} else if (RequestCode.equals("cardDivide")) { // 카드 뽑을때마다 호출
					System.out.println(token + "번 플레이어게에 카드나누기 시작");
					int num = Integer.parseInt(token);
					System.out.println("내 번호 :" + playerNum);

					if (num == playerNum) {
						System.out.println("특정 플레이어에게 나눠주기 들어옴");
						for (int i = 0; i < player.size(); i++) {
							frame.playerCard[i].setVisible(false);
							frame.playerCard[i].removeActionListener(this);
						}
						player.add(st.nextToken());
						if(player.size() == 15){
							System.out.println("파산");
							continue;
						}
						for (int i = 0; i < player.size(); i++) {
							// frame.playerCard[i].setText(player.get(i));
							frame.playerCard[i].setIcon(cardImgList.get(cardList.indexOf(player.get(i))));
							frame.playerCard[i].setVisible(true);
							frame.playerCard[i].addActionListener(this);
						}

					}
					String idx = "" + userIdx;
					if (frame.player2_nameLabel.getText().trim().equals(idx.trim())) {
						int cnt = Integer.parseInt(frame.player2CardCnt.getText().trim());
						cnt++;
						frame.player2CardCnt.setText("" + cnt);
					} else if (frame.player3_nameLabel.getText().trim().equals(idx.trim())) {
						int cnt = Integer.parseInt(frame.player3CardCnt.getText().trim());
						cnt++;
						frame.player3CardCnt.setText("" + cnt);
					} else if (frame.player4_nameLabel.getText().trim().equals(idx.trim())) {
						int cnt = Integer.parseInt(frame.player4CardCnt.getText().trim());
						cnt++;
						frame.player4CardCnt.setText("" + cnt);
					}
					
					if (playBack) {
						if(playJump){
							if(userIdx == 1){
								userIdx =3;
							} else if(userIdx == 0){
								userIdx =2;
							} else{
								userIdx = userIdx-2;
							} playJump = false;
						}
						else if (userIdx == 0) {
							userIdx = 3;

						} else {
							userIdx--;
						}
					} else {
						if(playJump){
							if(userIdx == 2){
								userIdx =0;
							} else if(userIdx == 3){
								userIdx =1;
							} else{
								userIdx = userIdx+2;
							} playJump = false;
						}
						else if (userIdx == 3) {
							userIdx = 0;

						} else {
							userIdx++;
						}
					}
					frame.centerNameLa.setText((userIdx) + " player");

				} else if (RequestCode.equals("turnEnd")) {
					System.out
							.println("유저 인덱스:" + userIdx + ", 2번플레이어의 이름:" + frame.player2_nameLabel.getText().trim());
					String idx = "" + userIdx;
					if (frame.player2_nameLabel.getText().trim().equals(idx.trim())) {
						int cnt = Integer.parseInt(frame.player2CardCnt.getText().trim());
						cnt--;
						frame.player2CardCnt.setText("" + cnt);
					} else if (frame.player3_nameLabel.getText().trim().equals(idx.trim())) {
						int cnt = Integer.parseInt(frame.player3CardCnt.getText().trim());
						cnt--;
						frame.player3CardCnt.setText("" + cnt);
					} else if (frame.player4_nameLabel.getText().trim().equals(idx.trim())) {
						int cnt = Integer.parseInt(frame.player4CardCnt.getText().trim());
						cnt--;
						frame.player4CardCnt.setText("" + cnt);
					}
					if (playBack) {
						if(playJump){
							if(userIdx == 1){
								userIdx =3;
							} else if(userIdx == 0){
								userIdx =2;
							} else{
								userIdx = userIdx-2;
							} playJump = false;
						}
						else if (userIdx == 0) {
							userIdx = 3;

						} else {
							userIdx--;
						}
					} else {
						if(playJump){
							if(userIdx == 2){
								userIdx =0;
							} else if(userIdx == 3){
								userIdx =1;
							} else{
								userIdx = userIdx+2;
							} playJump = false;
						}
						else if (userIdx == 3) {
							userIdx = 0;

						} else {
							userIdx++;
						}
					}
					frame.centerNameLa.setText((userIdx) + " player");

				} else if (RequestCode.equals("playBack")) {
					playBack =!playBack;
				} else if(RequestCode.equals("playJump")){
					playJump = true;
				} else if(RequestCode.equals("cardChange")){ // 모양과 숫자를 String으로 받음
					frame.frontCard.setIcon(cardImgList.get(cardList.indexOf(token)));
				}

			} // end while
		} catch (Exception ex) {
			ex.printStackTrace();
		} // end catch
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		Object obj = e.getSource();

		// 컴포넌트에 따른 이벤트 처리.

		if (obj == frame.cardDeck) { // 카드를 뽑을 때
			if (ready == false) { // 만약 시작이라면
				output.println("1000");
				System.out.println("Request 1000");
			} else if (ready) { // 시작 이후
				System.out.println(playerNum + "," + userIdx);
				if (playerNum == userIdx) {
					output.println("1100");
					System.out.println("Request 1100");
				}
			}
		} else if (obj == frame.playerCard[0] || obj == frame.playerCard[1] || obj == frame.playerCard[2]
				|| obj == frame.playerCard[3] || obj == frame.playerCard[4] || obj == frame.playerCard[5]
				|| obj == frame.playerCard[6] || obj == frame.playerCard[7] || obj == frame.playerCard[8]
				|| obj == frame.playerCard[9] || obj == frame.playerCard[10] || obj == frame.playerCard[11]
				|| obj == frame.playerCard[12] || obj == frame.playerCard[13]) {
			// 사용자의 카드를 선택하였을 때
			if (playerNum == userIdx) {
				System.out.println("카드사용 메소드 돌입");
				JButton btn = (JButton) obj; // 선택한 카드 버튼
				// String card = btn.getText(); // 선택한 카드의 텍스트
				String iconSrc = btn.getIcon().toString();
				StringTokenizer st1 = new StringTokenizer(iconSrc, "/");
				st1.nextToken();
				st1.nextToken();
				StringTokenizer st2 = new StringTokenizer(st1.nextToken(), ".");
				card = st2.nextToken();
				System.out.println("선택한 카드는 " + card);

				String selectCardShape = card.substring(0, 1); // 선택한 카드의 모양
				String selectCardNumber = card.substring(1); // 선택한 카드의 숫자
				System.out.println("카드 모양: " + selectCardShape + ", 카드 번호: " + selectCardNumber);

				String frontIconSrc = frame.frontCard.getIcon().toString();
				StringTokenizer st3 = new StringTokenizer(frontIconSrc, "/");
				st3.nextToken();
				st3.nextToken();
				StringTokenizer st4 = new StringTokenizer(st3.nextToken(), ".");
				String front = st4.nextToken();
				String frontCardShape = front.substring(0, 1); // 선택한 카드의 모양
				String frontCardNumber = front.substring(1); // 선택한 카드의 숫자
				
				if (frontCardShape.equals(selectCardShape) || frontCardNumber.equals(selectCardNumber)) {
					if(selectCardNumber.equals("7")){
						System.out.println("7을 냈다.");
						selectShape.setVisible(true);
						
					} else{
					output.println("1200|" + card);
					}
					for (int i = 0; i < player.size(); i++) {	// 사용자 카드패 초기화
						frame.playerCard[i].setVisible(false);
						frame.playerCard[i].removeActionListener(this);
					}
					player.remove(card);
					System.out.println("카드 사용.");
					for (int i = 0; i < player.size(); i++) {	// 사용 후 카드패 재설정
						frame.playerCard[i].setVisible(true);
						frame.playerCard[i].addActionListener(this);
						frame.playerCard[i].setIcon(cardImgList.get(cardList.indexOf(player.get(i))));
					}

				} else {
					System.out.println("낼수없다.");
				}

			}
		}
	}

	// 메인 메소드
	public static void main(String args[]) {
		if (args.length > 0) {
			new Client(args[0]);
		} else {
			new Client("210.123.255.157");
		} // end else
	}
}