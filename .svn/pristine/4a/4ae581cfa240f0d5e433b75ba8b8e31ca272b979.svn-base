package onecard;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.Vector;


/**
 * 이 클래스는 원카드 게임의 서버 역할을 한다. 이 클래스는 서버소켓을 생성하며 회원정보를 관리하는 역할을 수행한다. 이 클래스는 ...한
 * 방법으로 사용될 수 있으며, .... ... 기능에 대한 콘트롤은 ... 메소드를 사용하여 수행한다.
 * 
 * 
 * @version 1.02 17/02/10
 * @author team 2
 * @since JDK1.3
 */
public class GameServer {

	public static List<String> cardList = new ArrayList<String>(); // 카드를 저장할
																	// List 생성

	// ♠=s1~13, ♡=h1~13, ◇=d1~13, ♣=c1~13, colorJoker=j1, blackJoker=j2

	private Vector<GameHandler> handlers; // 클라이언트를 관리할 벡터 컬렉션.
	private Vector<String> members;
	/**
	 * GameServer의 생성자. ServerSocket을 실행해서 서버를 켜는 역할을 한다.
	 *
	 * @param port
	 *            서버의 포트 넘버
	 * @since JDK 1.2
	 */
	GameServer(int port) {
		
		members = new Vector<>();
		try {
			members = loadMembers();
		} catch (IOException e) {
			
		}
		
		// 쓰레드로 클라이언트의 접속을 계속 기다린다.

		try {
			ServerSocket server = new ServerSocket(port); // 주어진 포트넘버로 서버소켓 생성.
			handlers = new Vector<>(); // 벡터 생성.
			System.out.println("GameServer is ready."); // 서버가 켜지면 콘솔창에 메세지 출력.

			// 클라이언트가 접속하면 accept 메소드를 호출하며 접속을 수락한다.

			while (true) {
				Socket client = server.accept();
				GameHandler gamehandler = new GameHandler(this, client); // GameHandler
																			// 인스턴스
																			// 생성.
				gamehandler.start(); // 클라이언트의 접속만을 체크하는 쓰레드 스타트.
			} // end while
		} catch (Exception e) {
			e.printStackTrace();
		} // end catch
	}

	/**
	 * 클라이언트가 접속하면 벡터에 추가하는 메소드. GameHandler 클래스에서 호출된다.
	 * 
	 * @param gamehandler
	 *            GameHandler의 인스턴스.
	 * @since JDK 1.2
	 */
	void register(GameHandler gamehandler) {
		handlers.addElement(gamehandler);
	}

	/**
	 * 클라이언트의 접속이 끊어지면 벡터에서 제거하는 메소드. GameHandler 클래스에서 호출된다.
	 * 
	 * @param gamehandler
	 *            GameHandler의 인스턴스.
	 * @since JDK 1.2
	 */
	void unregister(GameHandler gamehandler) {
		handlers.removeElement(gamehandler);
	}

	/**
	 * 모든 클라이언트에게 메세지를 출력할 때 사용하는 메소드. 충돌을 막기위해 동기화처리를 해줬다.
	 * 
	 * @param message
	 *            각 프로토콜에 해당하는 메세지.
	 * @since JDK 1.2
	 */
	void broadcast(String message) {

		// 동기화 처리
		synchronized (handlers) {
			// 모든 클라이언트에게 메세지를 보내기 위해 반복문 사용.
			for (int i = 0; i < handlers.size(); i++) {
				GameHandler temGamehandler = handlers.elementAt(i);
				try {
					temGamehandler.unicast(message);
				} catch (Exception ex) {
					ex.printStackTrace();
				} // end catch
			} // end for
		} // end synchronized
	}

	boolean checkId(String input_id) {
		
		for (int i = 0; i < members.size(); i++) {
			String temMember = members.get(i);
			StringTokenizer st = new StringTokenizer(temMember, "|");
			String id = st.nextToken();
			
			if (input_id.equals(id)){
				return false;
			}
		}
		return true;
	}
	
	
	Member checkPassword(String input_id, String input_pw) {
		if (checkId(input_id)){
			return null;
		} else {
			
			for (int i = 0; i < members.size(); i++) {
				String temMember = members.get(i);
				StringTokenizer st = new StringTokenizer(temMember, "|");
				String id = st.nextToken();
				String pw = st.nextToken();
				String name = st.nextToken();
				int victory_int = Integer.parseInt(st.nextToken());
				if(input_pw.equals(pw)){
					Member member = new Member(id, pw, name, victory_int);
					return member;
				} 
			}
		}
		return null;
	}
	
	boolean checkLoginMember(String input_id) {
		for (int i = 0; i < handlers.size(); i++){
			GameHandler temGameHandler = handlers.get(i);
			Member temMember = temGameHandler.member;
			
			if (input_id.equals(temMember.getU_id())){
				return false;
			}
		}
		return true;
	}
	
	void saveMember(Member member) throws IOException {
		
		StringBuffer sf = new StringBuffer();
		FileOutputStream fos = new FileOutputStream("D:/members.txt", true);
		PrintWriter pw = new PrintWriter(fos, true);
		
		/*
		for (int i = 0; i < members.size(); i++){
			StringTokenizer st = new StringTokenizer(members.get(i), "\r\n");
			String temMember = st.nextToken();
			
			StringTokenizer st2 = new StringTokenizer(temMember, "|");
			String id = st2.nextToken();
			
			if (member.getU_id().equals(id)){
				
			}
		}*/                                                                    // 미완성 코드.
		
		sf.append(member.getU_id() + "|");
		sf.append(member.getU_pass()+ "|");
		sf.append(member.getName() + "|");
		sf.append(member.getVictory());
		
		members.addElement(sf.toString());
		
		sf.append("/");
		pw.print(sf.toString());
		pw.close();
		fos.close();
	}
	
	Vector<String> loadMembers() throws IOException {
		
		FileInputStream fis = new FileInputStream("D:/members.txt");
		BufferedReader bf = new BufferedReader(new InputStreamReader(fis));
		
		String temData =  bf.readLine();
		StringTokenizer st = new StringTokenizer(temData, "/");
		
		if(st.hasMoreTokens()){
			members.addElement(st.nextToken());
		}
		
		bf.close();
		fis.close();
		
		return members;
	}
	
	// 메인 메소드
	public static void main(String args[]) {
		new GameServer(1000);
	}
}
